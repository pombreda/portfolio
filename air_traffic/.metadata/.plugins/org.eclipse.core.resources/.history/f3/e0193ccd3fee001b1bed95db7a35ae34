/*
 CCBS mockup.
 (C) CCBS team, 2007.
 */
package edu.gatech.ccbs;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.*;
import java.util.*;

// stupid workaround for fact that Java2D sucks
class GraphicsState {
	public AffineTransform transform;
	public Stroke stroke;
	public Paint paint;
}

public class MapPanel extends JPanel {
	private static final long serialVersionUID = 1L;
	private MapModel mapModel;
	private Stack gstateStack;
	private Random pseudoRng;
	
	public boolean showRunways = true;
	public boolean showTaxiways = true;
	public boolean showRamps = true;
	public boolean showBuildings = true;
	public boolean showPoints = false;
	public boolean showAircraft = true;
	
	public HashSet highlightedObjects;
	
	public void setRandomColor(Graphics2D g2d) {
		g2d.setPaint(new Color(pseudoRng.nextFloat(), pseudoRng.nextFloat(), pseudoRng.nextFloat()));
	}
	
	private void scaleView(Graphics2D g2d) {
		double hscale = (double)getWidth() / mapModel.mapWidth;
		double vscale = (double)getHeight() / mapModel.mapHeight;
		g2d.scale(hscale, vscale);
	}
	
	@SuppressWarnings("unchecked")
	private void pushGraphicsState(Graphics2D g2d) {
		GraphicsState gstate = new GraphicsState();
		gstate.transform = g2d.getTransform();
		gstate.stroke = g2d.getStroke();
		gstate.paint = g2d.getPaint();
		gstateStack.push(gstate);
	}
	
	private void popGraphicsState(Graphics2D g2d) {
		GraphicsState gstate = (GraphicsState)gstateStack.pop();
		g2d.setTransform(gstate.transform);
		g2d.setStroke(gstate.stroke);
		g2d.setPaint(gstate.paint);
	}
	
	private Color maybeColorHighlighted(Color baseColor, Model m) {
		if(highlightedObjects.contains(m)) {
			return baseColor.brighter();
		}
		
		return baseColor;
	}
	
	private void renderShapeModel(Graphics2D g2d, ShapeModel sm) {
		GeneralPath path = new GeneralPath();
		Point2D.Double start = (Point2D.Double)sm.outlinePoints.get(0);
		path.moveTo((float)start.x, (float)start.y);
		for(int i = 1; i < sm.outlinePoints.size(); ++i) {
			Point2D.Double pt = (Point2D.Double)sm.outlinePoints.get(i);
			path.lineTo((float)pt.x, (float)pt.y);
		}
		g2d.fill(path);
	}
	
	private void renderRunwayModel(Graphics2D g2d, RunwayModel rm) {
		if(showRunways) {
			g2d.setPaint(maybeColorHighlighted(Main.runwayColor, rm));
			renderShapeModel(g2d, rm);
		}
	}
	
	private void renderTaxiwayModel(Graphics2D g2d, TaxiwayModel tm) {
		if(showTaxiways) {
			g2d.setPaint(maybeColorHighlighted(Main.taxiwayColor, tm));
			renderShapeModel(g2d, tm);
		}
	}
	
	private void renderRampModel(Graphics2D g2d, RampModel rm) {
		if(showRamps) {
			g2d.setPaint(maybeColorHighlighted(Main.rampColor, rm));
			renderShapeModel(g2d, rm);
		}
	}
	
	private void renderBuildingModel(Graphics2D g2d, BuildingModel bm) {
		if(showBuildings) {
			g2d.setPaint(maybeColorHighlighted(Main.buildingColor, bm));
			renderShapeModel(g2d, bm);
		}
	}
	
	private void renderPathModel(Graphics2D g2d, PathModel pm) {
		g2d.setPaint(Main.pathColor);
		float dashArray[] = {5.0f, 2.5f};
		BasicStroke stroke = new BasicStroke(2.0f, BasicStroke.CAP_BUTT,
				BasicStroke.JOIN_MITER, 10.0f, dashArray, 10.0f);
		g2d.setStroke(stroke);
		
		double x[] = new double[pm.intersections.size()];
		double y[] = new double[pm.intersections.size()];
		
		Point2D.Double start = (Point2D.Double)pm.realEndpoints.get(0);
		Point2D.Double end = (Point2D.Double)pm.realEndpoints.get(1);
		
		x[0] = start.x;
		y[0] = start.y;
		x[pm.intersections.size() - 1] = end.x;
		y[pm.intersections.size() - 1] = end.y;
		
		for(int i = 1; i < pm.intersections.size() - 1; ++i) {
			Intersection i1 = (Intersection)pm.intersections.get(i-1);
			Intersection i2 = (Intersection)pm.intersections.get(i);
			Point2D.Double p1 = i1.point;
			Point2D.Double p2 = i2.point;
			Line2D.Double lin = new Line2D.Double(p1, p2);
			g2d.draw(lin);
		}
	}
	
	private void renderAircraftModel(Graphics2D g2d, AircraftModel am) {
		if(showAircraft) {
			g2d.setPaint(Main.aircraftColor);
			Point2D.Double pts[] = new Point2D.Double[3];
			double dx = 0.867 * Main.aircraftSize;
			double dy = 0.5 * Main.aircraftSize;
			pts[0] = new Point2D.Double(0.0d, -Main.aircraftSize);
			pts[1] = new Point2D.Double(-dx, dy);
			pts[2]= new Point2D.Double(dx, dy);
			
			pushGraphicsState(g2d);
			g2d.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER));
			g2d.translate(am.location.x, am.location.y);
			g2d.rotate(am.rotation);
			
			for(int i = 0; i < 3; ++i) {
				int c = i;
				int n = (i+1) % 3;
				Line2D.Double lin = new Line2D.Double(pts[c], pts[n]);
				g2d.draw(lin);
			}

			if(highlightedObjects.contains(am)) {
				double w = Main.aircraftSize * 2;
				double h = Main.aircraftSize * 2;
				double lx = -w/2;
				double ly = -w/2;
				
				Ellipse2D.Double el = new Ellipse2D.Double(lx, ly, w, h);
				g2d.draw(el);
			}
			
			popGraphicsState(g2d);
		}
	}
	
	private void renderPointSetModel(Graphics2D g2d, PointSetModel pm) {
		if(showPoints) {
			g2d.setPaint(Color.CYAN);
			for(int i = 0; i < pm.controlPoints.size(); ++i) {
				Point2D.Double pt = (Point2D.Double)pm.controlPoints.get(i);
				double w = Main.pointSize;
				double h = Main.pointSize;
				double lx = pt.x - w/2;
				double ly = pt.y - h/2;
				
				Ellipse2D.Double el = new Ellipse2D.Double(lx, ly, w, h);
				g2d.fill(el);
			}
		}
	}
	
	private void renderModel(Graphics2D g2d, Model m) {
		pushGraphicsState(g2d);
		
		g2d.setStroke(new BasicStroke(1.0f));
		
		if(m instanceof RunwayModel) {
			renderRunwayModel(g2d, (RunwayModel)m);
		}
		else if(m instanceof TaxiwayModel) {
			renderTaxiwayModel(g2d, (TaxiwayModel)m);
		} 
		else if(m instanceof RampModel) {
			renderRampModel(g2d, (RampModel)m);
		}
		else if(m instanceof BuildingModel) {
			renderBuildingModel(g2d, (BuildingModel)m);
		}
		else if(m instanceof PointSetModel) {
			renderPointSetModel(g2d, (PointSetModel)m);
		}
		else if(m instanceof PathModel) {
			renderPathModel(g2d, (PathModel)m);
		}
		else if(m instanceof AircraftModel) {
			renderAircraftModel(g2d, (AircraftModel)m);
		}
		
		popGraphicsState(g2d);
	}

	public MapPanel(MapModel model) {
		mapModel = model;
		highlightedObjects = new HashSet();
		setBackground(Main.backgroundColor);
		gstateStack = new Stack();
		pseudoRng = new Random();
		setFocusable(true);
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D)g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
							 RenderingHints.VALUE_ANTIALIAS_ON);
		pushGraphicsState(g2d);
		
		scaleView(g2d);
		ArrayList lst = mapModel.children;
		for(int i = 0; i < lst.size(); ++i)
			renderModel(g2d, (Model)lst.get(i));
		
		popGraphicsState(g2d);
	}
}
